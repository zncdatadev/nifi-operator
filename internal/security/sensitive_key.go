package security

import (
	"context"
	"crypto/rand"
	"encoding/base64"
	"fmt"

	"github.com/zncdatadev/operator-go/pkg/builder"
	"github.com/zncdatadev/operator-go/pkg/client"
	"github.com/zncdatadev/operator-go/pkg/reconciler"
	corev1 "k8s.io/api/core/v1"
	ctrl "sigs.k8s.io/controller-runtime"
	ctrlclient "sigs.k8s.io/controller-runtime/pkg/client"
)

var sensitivekeylogger = ctrl.Log.WithName("security").WithName("sensitivekey")

var _ reconciler.ResourceReconciler[builder.ConfigBuilder] = &SensitiveKeyReconciler{}

type SensitiveKeyReconciler struct {
	reconciler.GenericResourceReconciler[builder.ConfigBuilder]

	autoGenerated bool
}

func NewSensitiveKeyReconciler(
	client *client.Client,
	name string,
	authGenerated bool,
	options ...builder.Option,
) *SensitiveKeyReconciler {
	b := NewSensitiveKeyBuilder(
		client,
		name,
		options...,
	)

	return &SensitiveKeyReconciler{
		GenericResourceReconciler: *reconciler.NewGenericResourceReconciler[builder.ConfigBuilder](
			client,
			b,
		),
		autoGenerated: authGenerated,
	}
}

func (r *SensitiveKeyReconciler) Reconcile(ctx context.Context) (ctrl.Result, error) {
	secret := &corev1.Secret{}

	ns := r.Client.GetOwnerNamespace()
	name := r.GetName()

	if err := r.Client.Get(ctx, ctrlclient.ObjectKey{Namespace: ns, Name: name}, secret); err != nil {
		if ctrlclient.IgnoreNotFound(err) != nil {
			return ctrl.Result{}, err
		}

		if !r.autoGenerated {
			return ctrl.Result{}, fmt.Errorf("sensitive key secret %s/%s not found, but auto generation is disabled", ns, name)
		}

		sensitivekeylogger.Info("Sensitive key secret not found, creating it", "name", name, "namespace", ns)
		return r.GenericResourceReconciler.Reconcile(ctx)
	}

	sensitivekeylogger.Info("Sensitive key secret already exists, skipping reconciliation", "name", name, "namespace", ns)
	return ctrl.Result{}, nil
}

type SensitiveKeyBuilder struct {
	builder.SecretBuilder
}

func NewSensitiveKeyBuilder(
	client *client.Client,
	name string,
	options ...builder.Option,
) *SensitiveKeyBuilder {
	b := &SensitiveKeyBuilder{
		SecretBuilder: *builder.NewSecretBuilder(
			client,
			name,
			options...,
		),
	}

	return b
}

func (b *SensitiveKeyBuilder) Build(ctx context.Context) (ctrlclient.Object, error) {
	// generate a random password for the admin user, length 16
	randomBytes := make([]byte, 16)
	if _, err := rand.Read(randomBytes); err != nil {
		return nil, err
	}

	// convert to base64 string
	password := base64.StdEncoding.EncodeToString(randomBytes)
	if len(password) > 16 {
		password = password[:16]
	}

	b.AddItem("nifiSensitivePropsKey", password)

	return b.GetObject(), nil
}
